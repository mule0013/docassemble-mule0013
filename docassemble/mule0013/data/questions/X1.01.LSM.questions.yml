# We put all the question block into this file.  We do 
# this simply to be organised.  We want to separate the
# actual questions we ask from the logic flow of the program
# itself (which is in the main file).  That way it makes
# the logic flow easier to identify as it's not
# cluttered with questions
#
# NOTE:  This file should not contain any mandatory
# question blocks
---
# Asks the initial question
# We populate LSMsue_reason with 'LSMpromisee' or 'LSMpromisor'.
# These strings are easier work with than the long-form answer
# we display to the user.
# Ref: https://docassemble.org/docs/fields.html#radio
#
question: Why do you want to sue?
fields:
  - no label: LSMsue_reason
    datatype: radio
    choices:
      - I paid for work that wasn't done: LSMpromisee
      - Someody didn't pay me for work that I did: LSMpromisor
---
# Stores the description of the work that was requested
question: Describe the work you wanted done
fields:
  - no label: LSMwork_requested
    datatype: area
---
# Stores the description of the work that was requested
question: Describe the work that you completed
fields:
  - no label: LSMwork_completed
    datatype: area
---
# We ask the two payment questions in a single question block
question: Payment
fields:
  - How much did you agree for the cost of this work?: LSMpayment_agreed
    datatype: currency
    min: 0
under: |
  If you have not yet paid anything, just leave the default value of $0.00
---
# Test for Offer and Acceptance
# This code is going to ask two questions to make sure that
question: Did the other person agree to do this work?
fields:
  - no label: LSMcertainty
    datatype: radio
    choices:
      - Yes. The other person agreed to do exactly this work: LSMagree_exact
      - Yes. The other person agreed to do some of this work but there was other work that was not agreed to that wasn't done: LSMagree_inexact
      - No. The other person did not agree to do this work or all of this work: LSMdisagree
---
# Test for Offer and Acceptance
# This code is going to ask two questions to make sure that
question: Did the other person agree for you to do this work?
fields:
  - no label: LSMcertainty_p
    datatype: radio
    choices:
      - Yes. The other person agreed for you to do exactly this work: LSMagree_exact
      - Yes. The other person agreed for you to do some of the work but there was other work that was not agreed to that was done: LSMagree_inexact
      - No. The other person did not agree for you to do any of this work: LSMdisagree
---
# Test for Consideration (and Certainty)
# Because this is a Yes/No answer we store the results as boolean (ie: True/False)
# values.  For more information on booleans check out C2.01 video.
question: Payment for the Work
subquestion: |
  Did you and the other person agree how much would be  paid for this work?
fields:
  - no label: LSMconsideration
    datatype: radio
    choices:
      - Yes, we agreed to pay ${ currency(LSMpayment_agreed) } for the work: True
      - No, we never reached a firm agreement on how much would paid: False
---
# Just to mix things up, we use a 'yesno' field to ask whether the other person
# had capacity.  We are reducing 'capacity' in this app to just being an adult.
# For the purposes of this app it's too complex to get into actual mental capacity.
question: Who did you contract with?
subquestion: |
  Was the other person an adult?
yesno: LSMcapacity
---
# Question to ask if there is a written contract
question: Written Contract
subquestion: |
  A 'written contract' can mean a formal contract document.
  It can also mean any emails, texts or messages you send
  or receive about the contract.
  If your
  messages contain information about:

  - what work was meant to be done
  - how much was going to be paid for that work
  - who was going to do the work and who was going to pay

  Then those messages may be enough to be a 'written contract'.
fields:
  - Do you or the other person have a 'written contract'?: LSMwritten_contract
    datatype: yesnoradio
---

